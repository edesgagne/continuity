// Generated by CoffeeScript 1.6.3
(function() {
  describe("parse", function() {
    beforeEach(function() {
      return Parse.initialize("pxBn6DIgzMNAtUuG6N08MdPqqGywblo9JPkMwdUe", "CUsQapRcahYD2ztJAAeDMiLhPKxddG0reZFVn6fx");
    });
    return it("creates object", function() {
      waitsFor((function() {
        var TestObject, testObject;
        TestObject = Parse.Object.extend("TestObject");
        testObject = new TestObject();
        return this.itworked = testObject.save({
          foo: "bar",
          cake: "car"
        });
      }), "wait for it to upload to server", 500);
      return runs(function() {
        return (expect(this.itworked)).toBeTruthy();
      });
    });
  });

  describe("box", function() {
    describe("initializing", function() {
      beforeEach(function() {
        return box.initialize();
      });
      return it("items are empty array", function() {
        return (expect(box.getitems())).toEqual([]);
      });
    });
    describe("changing modes", function() {
      beforeEach(function() {
        box.initialize();
        return app.initialize();
      });
      it("if online, online mode", function() {
        helper.trigger(window.document, "online");
        return (expect(box.mode)).toEqual("online");
      });
      return it("if offline, offline mode", function() {
        helper.trigger(window.document, "offline");
        return (expect(box.mode)).toEqual("offline");
      });
    });
    describe("custom adding", function() {
      beforeEach(function() {
        var el;
        el = document.getElementById("stage");
        return el.innerHTML = "<p>embedded text</p>";
      });
      return it("adds text found in html element", function() {
        var text;
        text = ($('p')).html();
        box.mode = "offline";
        box.add(text);
        return (expect(window.localStorage['items'])).toEqual('["embedded text"]');
      });
    });
    return describe("uploading to server or localhost", function() {
      beforeEach(function() {
        box.initialize();
        app.initialize();
        return Parse.initialize("pxBn6DIgzMNAtUuG6N08MdPqqGywblo9JPkMwdUe", "CUsQapRcahYD2ztJAAeDMiLhPKxddG0reZFVn6fx");
      });
      describe("offline", function() {
        beforeEach(function() {
          helper.trigger(window.document, "offline");
          return box.add('hello');
        });
        it("if offline, uses window.localStorage", function() {
          var items;
          items = JSON.parse(window.localStorage['items']);
          return (expect(items)).toEqual(['hello']);
        });
        return it("if offline, items are full", function() {
          return (expect(box.getitems())).toEqual(['hello']);
        });
      });
      return describe("online", function() {
        beforeEach(function() {
          helper.trigger(window.document, "online");
          return box.add('some info');
        });
        return it("if online, items are empty", function() {
          return (expect(box.getitems())).toEqual([]);
        });
      });
    });
  });

  describe("app", function() {
    describe("initialize: should bind to....", function() {
      it("...ondeviceready", function() {
        runs(function() {
          spyOn(app, "onDeviceReady");
          app.initialize();
          return helper.trigger(window.document, "deviceready");
        });
        waitsFor((function() {
          return app.onDeviceReady.calls.length > 0;
        }), "onDeviceReady should be called once", 500);
        return runs(function() {
          return (expect(app.onDeviceReady)).toHaveBeenCalled();
        });
      });
      it("...onOnline", function() {
        runs(function() {
          spyOn(app, "onOnline");
          app.initialize();
          return helper.trigger(window.document, "online");
        });
        waitsFor((function() {
          return app.onOnline.calls.length > 0;
        }), "onOnline should be called once", 500);
        return runs(function() {
          return (expect(app.onOnline)).toHaveBeenCalled();
        });
      });
      return it("...onOffline", function() {
        runs(function() {
          spyOn(app, "onOffline");
          app.initialize();
          return helper.trigger(window.document, "offline");
        });
        waitsFor((function() {
          return app.onOffline.calls.length > 0;
        }), "onOffline should be called once", 500);
        return runs(function() {
          return (expect(app.onOffline)).toHaveBeenCalled();
        });
      });
    });
    describe("firing", function() {
      it("should report that onDeviceReady fired", function() {
        spyOn(app, "receivedEvent");
        app.onDeviceReady();
        return (expect(app.receivedEvent)).toHaveBeenCalledWith("deviceready");
      });
      it("should report that onOffline fired", function() {
        spyOn(app, "receivedEvent");
        app.onOffline();
        return (expect(app.receivedEvent)).toHaveBeenCalledWith("offline");
      });
      return it("should report that onOnline fired", function() {
        spyOn(app, "receivedEvent");
        app.onOnline();
        return (expect(app.receivedEvent)).toHaveBeenCalledWith("online");
      });
    });
    return describe("receivedEvent and set text...", function() {
      beforeEach(function() {
        var el;
        el = document.getElementById("stage");
        return el.innerHTML = ["<div id='deviceready'>", "	<ul class='event'></ul>", "</div>"].join('\n');
      });
      it("...saying deviceready", function() {
        var text;
        app.receivedEvent("deviceready");
        text = ($('ul.event li:last-child')).html();
        return (expect(text)).toEqual("deviceready");
      });
      it("...saying offline", function() {
        var text;
        app.receivedEvent("offline");
        text = ($('ul.event li:last-child')).html();
        return (expect(text)).toEqual("offline");
      });
      return it("...saying online", function() {
        var text;
        app.receivedEvent("online");
        text = ($('ul.event li:last-child')).html();
        return (expect(text)).toEqual("online");
      });
    });
  });

}).call(this);
