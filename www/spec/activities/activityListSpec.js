// Generated by CoffeeScript 1.6.3
(function() {
  define(["../../js/collections/activitylist"], function(ActivityList) {
    return describe("The Activity List", function() {
      beforeEach(function() {
        var myjson;
        myjson = [
          {
            id: 3,
            description: "ho"
          }, {
            id: 1,
            description: "hey",
            isCurrent: true,
            isLocked: false
          }, {
            id: 2,
            description: "hi"
          }
        ];
        this.al = new ActivityList(myjson);
        this.firstmodel = this.al.get(1);
        return this.secondmodel = this.al.get(2);
      });
      it("should initialize", function() {
        return (expect(this.al)).not.toBeNull();
      });
      it("should create models from json", function() {
        return (expect(this.al.models.length)).toEqual(3);
      });
      it("should sort itself", function() {
        var arr, lastid, model, _i, _len, _ref, _results;
        arr = [];
        lastid = 0;
        _ref = this.al.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          (expect(model.id)).toEqual(lastid + 1);
          _results.push(lastid++);
        }
        return _results;
      });
      it("should mark the first one as current", function() {
        return (expect(this.firstmodel.get("isCurrent"))).toEqual(true);
      });
      it("should mark the first one as unlocked", function() {
        return (expect(this.firstmodel.get("isLocked"))).toEqual(false);
      });
      it("upon complete, should move isCurrent to next model", function() {
        this.firstmodel.complete();
        return (expect(this.secondmodel.get("isCurrent"))).toEqual(true);
      });
      it("upon complete, should move unlock next model", function() {
        this.firstmodel.complete();
        return (expect(this.secondmodel.get("isLocked"))).toEqual(false);
      });
      return it("should properly handle finishing the last model", function() {
        spyOn(this.al, "finishedList");
        this.firstmodel.complete();
        this.secondmodel.complete();
        this.al.get(3).complete();
        return (expect(this.al.finishedList)).toHaveBeenCalled();
      });
    });
  });

}).call(this);
