// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'models/step', 'collections/steplist', 'routers/myrouter'], function($, Mobile, _, Parse, Step, StepList, MyRouter) {
    var Queries, _ref;
    return Queries = (function(_super) {
      __extends(Queries, _super);

      function Queries() {
        _ref = Queries.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Queries.prototype.className = "Queries";

      Queries.prototype.initialize = function() {
        console.log("queries");
        return _.bindAll(this);
      };

      Queries.prototype.logInUser = function(name, pass) {
        return Parse.User.logIn(name, pass, {
          success: function(user) {
            return console.log('success logging in');
          },
          error: function(user, error) {
            return console.error('error logging in', error);
          }
        });
      };

      Queries.prototype.signUpUser = function(name, pass) {
        var user;
        user = new Parse.User();
        user.set("username", name);
        user.set("password", pass);
        return user.signUp(null, {
          success: function(user) {
            return console.log('success signing up');
          },
          error: function(user, error) {
            return console.error("error signing up " + error.code + " " + error.message);
          }
        });
      };

      Queries.prototype.saveAllObjects = function(obj_arr) {
        var currentUser, list, st, stepJSON, _i, _len, _ref1;
        console.log('Queries: saving all objects');
        list = new StepList;
        stepJSON = [
          {
            "step_num": 1,
            "title": "Warning Signs",
            "description": "Warning signs (thoughts, images, mood, situation, behavior) that a crisis may be developing:",
            "fields": ["warning sign"]
          }, {
            "step_num": 2,
            "title": "Coping Strategies",
            "description": "Internal coping strategies: things I can do to take my mind off my problems without contacting another person (relaxation technique, physical activity):",
            "fields": ["coping strategy"]
          }, {
            "step_num": 3,
            "title": "People",
            "description": "People that provide distraction:",
            "fields": ["name", "phone number"]
          }, {
            "step_num": 4,
            "title": "Settings",
            "description": "Social settings that provide distraction:",
            "fields": ["place"]
          }
        ];
        list.add(stepJSON);
        currentUser = Parse.User.current();
        obj_arr = [];
        _ref1 = list.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          st = _ref1[_i];
          st.set({
            user: currentUser
          });
          st.setACL(new Parse.ACL(currentUser));
          obj_arr.push(st);
        }
        return Parse.Object.saveAll(obj_arr);
      };

      Queries.prototype.syncParseWithLocalStorage = function() {
        var currentUser, query;
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return;
        }
        if (window.localStorage["init"] === Parse.User.current().get('username')) {
          console.log('device already set up');
          return;
        }
        currentUser = Parse.User.current();
        query = new Parse.Query(Step);
        query.equalTo("user", currentUser);
        console.log('setting up device...about to query');
        return query.find({
          success: function(results) {
            var list, r, _i, _len;
            console.log('success in query');
            list = new StepList;
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              r = results[_i];
              list.add(r);
            }
            console.log(list);
            window.localStorage["steplist"] = JSON.stringify(list);
            console.log('locstor', window.localStorage["steplist"]);
            console.log('setting is set up to true');
            currentUser.set({
              isSetUp: true
            });
            currentUser.save();
            console.log('done in sync parse with local storage');
            return window.localStorage["init"] = Parse.User.current().get('username');
          },
          error: function(e) {
            return console.error('error', e);
          }
        });
      };

      Queries.prototype.updateCollectionOnline = function() {
        var currentUser, query;
        query = new Parse.Query(Step);
        currentUser = Parse.User.current();
        query.equalTo("user", currentUser);
        query.ascending('step_num');
        return query.find({
          success: function(results) {
            var i, obj, steps, updated;
            steps = JSON.parse(window.localStorage["steplist"]);
            i = 0;
            while (i < results.length) {
              obj = results[i];
              updated = null;
              $.each(steps, function(index, element) {
                if (element.step_num === obj.get('step_num')) {
                  updated = element;
                }
              });
              if (obj.get('step_num') !== updated["step_num"]) {
                console.error("steps are out of order");
              }
              obj.set({
                strategies: updated["strategies"]
              });
              obj.save();
              i = i + 1;
            }
            return console.log('synced online');
          },
          error: function(e) {
            return console.error('error', e);
          }
        });
      };

      return Queries;

    })(Parse.Object);
  });

}).call(this);
