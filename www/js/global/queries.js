// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'models/mysteps', 'views/popupview'], function($, Mobile, _, Parse, MySteps, PopupView) {
    var Queries, _ref;
    return Queries = (function(_super) {
      __extends(Queries, _super);

      function Queries() {
        _ref = Queries.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Queries.prototype.className = "Queries";

      Queries.prototype.initialize = function() {
        console.log("queries");
        return _.bindAll(this);
      };

      Queries.prototype.getMyJSON = function(file) {
        var myjson;
        console.log('calling get json');
        myjson = null;
        $.ajax({
          url: file,
          async: false,
          dataType: 'json',
          success: function(json) {
            return myjson = JSON.stringify(json);
          }
        });
        return JSON.parse(myjson);
      };

      Queries.prototype.logInUser = function(name, pass) {
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return Parse.Promise.error({
            message: 'not online'
          });
        }
        return Parse.User.logIn(name, pass);
      };

      Queries.prototype.signUpUser = function(name, pass) {
        var user;
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return Parse.Promise.error("not online");
        }
        user = new Parse.User();
        user.set("username", name);
        user.set("password", pass);
        return user.signUp(null);
      };

      Queries.prototype.saveSteps = function() {
        var b, currentUser, stepJSON;
        console.log('saving steps');
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return Parse.Promise.error("not online");
        }
        stepJSON = this.getMyJSON("js/json/steps.json");
        window.localStorage["user"] = Parse.User.current().get("username");
        window.localStorage["steplist"] = JSON.stringify(stepJSON);
        currentUser = Parse.User.current();
        b = new MySteps({
          list: JSON.stringify(stepJSON)
        });
        b.set({
          user: currentUser
        });
        b.setACL(new Parse.ACL(currentUser));
        console.log('mysteps: ', b);
        return b.save();
      };

      Queries.prototype.parseToLocalStorage = function() {
        var currentUser, query;
        console.log('parse to localstorage');
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return Parse.Promise.error("not online");
        }
        if (window.localStorage["user"] === Parse.User.current().get('username')) {
          console.log('local storage already contains this user data');
          return Parse.Promise.as("already set up");
        }
        currentUser = Parse.User.current();
        query = new Parse.Query(MySteps);
        query.equalTo("user", currentUser);
        return query.first({
          success: function(mysteps) {
            var myjson;
            console.log('success in query');
            myjson = JSON.parse(mysteps.get("list"));
            window.localStorage["steplist"] = JSON.stringify(myjson);
            return window.localStorage["user"] = currentUser.get("username");
          }
        });
      };

      Queries.prototype.updateCollection = function(coll) {
        console.log('updating collection on localstorage');
        window.localStorage["steplist"] = JSON.stringify(coll);
        if (window.uploader.getMode() === "online") {
          return window.queries.updateCollectionOnline();
        } else {
          return window.uploader.setUpdatedOffline(true);
        }
      };

      Queries.prototype.updateCollectionOnline = function() {
        var currentUser, query;
        console.log('updating collection online');
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return Parse.Promise.error("not online");
        }
        query = new Parse.Query(MySteps);
        currentUser = Parse.User.current();
        query.equalTo("user", currentUser);
        return query.first({
          success: function(mysteps) {
            var steps;
            steps = window.localStorage["steplist"];
            mysteps.set({
              list: steps
            });
            mysteps.save();
            return console.log('synced online');
          }
        });
      };

      return Queries;

    })(Parse.Object);
  });

}).call(this);
