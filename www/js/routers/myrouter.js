// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'models/step', 'collections/steplist', 'views/stepview', 'views/steplistview'], function($, Mobile, _, Parse, Step, StepList, StepView, StepListView) {
    var _ref;
    return window.MyRouter = (function(_super) {
      __extends(MyRouter, _super);

      function MyRouter() {
        _ref = MyRouter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MyRouter.prototype.initialize = function() {
        console.log("router");
        return $(document).on("click", "a:not([data-bypass])", function(evt) {
          var href, root;
          href = {
            prop: $(this).prop("href"),
            attr: $(this).attr("href")
          };
          root = location.protocol + "//" + location.host + "/";
          if (href.prop && href.prop.slice(0, root.length) === root) {
            evt.preventDefault();
            Parse.history.navigate(href.attr, true);
          }
          return $('#myPanel').panel("close");
        });
      };

      MyRouter.prototype.routes = {
        "": "showHome",
        "safety": "showSafety"
      };

      MyRouter.prototype.basics = function(title) {
        console.log("show " + title);
        $('[data-role="content"]').html(title + " page");
        return $('[data-role="header"] > h3').html(title);
      };

      MyRouter.prototype.showHome = function() {
        var title;
        title = "Home";
        return this.basics(title);
      };

      MyRouter.prototype.showSafety = function() {
        var currentUser, query, title;
        title = "Safety Planning";
        this.basics(title);
        currentUser = Parse.User.current();
        query = new Parse.Query(Step);
        query.equalTo("user", currentUser);
        return query.find({
          success: function(results) {
            var element, list, listview, r, _i, _len;
            list = new StepList;
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              r = results[_i];
              list.add(r);
            }
            list.sort();
            listview = new StepListView({
              collection: list
            });
            element = listview.el;
            $('[data-role="content"]').html(element);
            return listview.jqdisplay();
          }
        });
      };

      return MyRouter;

    })(Parse.Router);
  });

}).call(this);
