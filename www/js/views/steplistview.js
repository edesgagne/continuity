// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'views/stepview', 'collections/steplist'], function($, Mobile, _, Parse, StepView, StepList) {
    var StepListView, _ref;
    return StepListView = (function(_super) {
      __extends(StepListView, _super);

      function StepListView() {
        _ref = StepListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StepListView.prototype.tagName = 'div';

      StepListView.prototype.attributes = {
        'data-role': 'collapsible-set'
      };

      StepListView.prototype.initialize = function() {
        var list, step, steps_array, _i, _len;
        list = new StepList;
        steps_array = JSON.parse(window.localStorage["steplist"]);
        for (_i = 0, _len = steps_array.length; _i < _len; _i++) {
          step = steps_array[_i];
          list.add(step);
        }
        this.collection = list;
        _.bindAll(this, 'render', 'rerender', 'jqdisplay', 'renderEach', 'close');
        this.collection.on('change', this.rerender);
        return this.subviews = [];
      };

      StepListView.prototype.render = function() {
        var view, _i, _len, _ref1;
        $(this.el).empty();
        if (this.subviews.length > 0) {
          _ref1 = this.subviews;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            view = _ref1[_i];
            console.log('removing old subviews');
            view.close();
          }
        }
        this.collection.each(this.renderEach, this);
        $(this.el).append("\n<span style=\"font-size: 12px; margin-top: 10px\">\nAdapted from the Safety Plan Template developed by Barbara Stanley and Gregory K. Brown\n<span>\n");
        return this;
      };

      StepListView.prototype.rerender = function(changedmodel) {
        var step_num;
        console.log('called rerender');
        this.render();
        step_num = changedmodel.get("step_num");
        $("#" + step_num).attr('data-collapsed', 'false');
        this.jqdisplay();
        return window.queries.updateCollection(this.collection);
      };

      StepListView.prototype.jqdisplay = function() {
        console.log('jq display of steplistview');
        $('[data-role="collapsible-set"]').collapsibleset();
        $('.textinput').textinput();
        $('[type="submit"]').button();
        return $('[data-role="button"]').button();
      };

      StepListView.prototype.renderEach = function(step) {
        var element, stepView;
        stepView = new StepView({
          model: step
        });
        this.subviews.push(stepView);
        element = stepView.render().el;
        return $(this.el).append(element);
      };

      StepListView.prototype.close = function() {
        var view, _i, _len, _ref1;
        _ref1 = this.subviews;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          view = _ref1[_i];
          console.log('removing old subviews final');
          view.close();
        }
        this.collection.unbind('change', this.rerender);
        $(this.el).empty();
        this.undelegateEvents();
        $(this.el).removeData().unbind();
        this.unbind();
        this.remove();
        Parse.View.prototype.remove.call(this);
        return delete this;
      };

      return StepListView;

    })(Parse.View);
  });

}).call(this);
