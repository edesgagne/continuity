// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'views/stepview'], function($, Mobile, _, Parse, StepView) {
    var StepListView, _ref;
    return StepListView = (function(_super) {
      __extends(StepListView, _super);

      function StepListView() {
        _ref = StepListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StepListView.prototype.tagName = 'div';

      StepListView.prototype.attributes = {
        'data-role': 'collapsible-set'
      };

      StepListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection.bind("change", this.rerender, this);
        return this.changed = -1;
      };

      StepListView.prototype.render = function() {
        this.collection.each(this.renderEach, this);
        return this;
      };

      StepListView.prototype.jqdisplay = function() {
        console.log('jq display');
        $('[data-role="collapsible-set"]').collapsibleset();
        $('.textinput').textinput();
        $('[type="submit"]').button();
        return $('[data-role="button"]').button();
      };

      StepListView.prototype.rerender = function(changedmodel) {
        var i, model, _i, _len, _ref1;
        console.log('rerendering collection');
        $(this.el).html("");
        this.collection.sort();
        this.changed = null;
        i = 1;
        _ref1 = this.collection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          model = _ref1[_i];
          if (model === changedmodel) {
            this.changed = i;
            break;
          }
          i = i + 1;
        }
        window.uploader.updateCollection(this.collection);
        this.render();
        return this.jqdisplay();
      };

      StepListView.prototype.renderEach = function(step) {
        var element, stepView;
        stepView = new StepView({
          model: step
        });
        element = stepView.render().el;
        if (this.changed !== -1 && this.changed === step.get('step_num')) {
          $(element).attr('data-collapsed', 'false');
          this.changed = -1;
        }
        return $(this.el).append(element);
      };

      return StepListView;

    })(Parse.View);
  });

}).call(this);
