// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'collections/activitylist', 'views/activityview', 'text!templates/activitylisttemplate.html'], function($, Mobile, _, Parse, ActivityList, ActivityView, activitylisttemplate) {
    var ActivityListView, _ref;
    return ActivityListView = (function(_super) {
      __extends(ActivityListView, _super);

      function ActivityListView() {
        _ref = ActivityListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ActivityListView.prototype.tagName = 'div';

      ActivityListView.prototype.template = _.template(activitylisttemplate);

      ActivityListView.prototype.events = {
        'click #prev': 'prev',
        'click #next': 'next'
      };

      ActivityListView.prototype.initialize = function() {
        var myjson;
        myjson = window.queries.getMyJSON("js/json/activities.json");
        console.log(myjson);
        this.al = new ActivityList(myjson);
        this.collection = this.al;
        _.bindAll(this, 'render', 'rerender', 'getCurrentId', 'getCurrent', 'prev', 'next', 'changeScreen', 'jqdisplay', 'close');
        this.collection.on('change:isCompleted', this.rerender, this);
        $(window).bind("swiperight", _.bind(this.prev, this));
        $(window).bind("swipeleft", _.bind(this.next, this));
        this.subview = null;
        return this.firstcall = true;
      };

      ActivityListView.prototype.getCurrentId = function() {
        var arr, curid;
        arr = this.collection.pluck("isCurrent");
        curid = arr.indexOf(true) + 1;
        return curid;
      };

      ActivityListView.prototype.getCurrent = function() {
        var cur, curid;
        curid = this.getCurrentId();
        cur = this.collection.get(curid);
        return cur;
      };

      ActivityListView.prototype.render = function() {
        if (this.firstcall) {
          this.viewpointer = this.getCurrentId();
          this.firstcall = false;
        }
        return this.changeScreen();
      };

      ActivityListView.prototype.prev = function() {
        if ($('#prev').attr("disabled") === "disabled") {
          console.error('tried to call prev, but disabled');
          return;
        }
        console.log('prev');
        this.viewpointer--;
        return this.changeScreen();
      };

      ActivityListView.prototype.next = function() {
        if ($('#next').attr("disabled")) {
          console.error('tried to call next, but disabled');
          alert("Sorry, you must tap the checkmark in order to unlock the next activity.");
          return;
        }
        console.log('next');
        this.viewpointer++;
        return this.changeScreen();
      };

      ActivityListView.prototype.changeScreen = function() {
        var av, newscreen;
        console.log('changescreen');
        if (this.subview) {
          console.log('closing a subview', this.subview);
          this.subview.close();
        }
        newscreen = this.collection.get(this.viewpointer);
        av = new ActivityView({
          model: newscreen
        });
        this.subview = av;
        console.log(av.render().el);
        $(this.el).html(this.template());
        $(this.el).append(av.el);
        return this.jqdisplay();
      };

      ActivityListView.prototype.rerender = function(changedmodel) {
        var cur, curid, next;
        console.error('rerender activitylistview');
        curid = this.getCurrentId();
        cur = this.collection.get(curid);
        next = this.collection.get(curid + 1);
        cur.notCurrent();
        next.current();
        return this.changeScreen();
      };

      ActivityListView.prototype.jqdisplay = function() {
        console.log('jq display of activitylistview');
        $('[data-role="button"]').button();
        console.log('about to disable');
        console.log(this.viewpointer, this.getCurrentId());
        if (this.viewpointer === 1) {
          console.log('disabling prev');
          $('#prev').button("disable");
        }
        if (this.viewpointer === this.getCurrentId()) {
          console.log('disabling next');
          return $('#next').button("disable");
        }
      };

      ActivityListView.prototype.close = function() {
        if (this.subview) {
          console.log('closing subview final');
          this.subview.close();
        }
        this.collection.off('change:isCompleted', this.rerender, this);
        $(window).off("swipeleft");
        $(window).off("swiperight");
        this.undelegateEvents();
        $(this.el).removeData().unbind();
        this.remove();
        this.unbind();
        return Parse.View.prototype.remove.call(this);
      };

      return ActivityListView;

    })(Parse.View);
  });

}).call(this);
