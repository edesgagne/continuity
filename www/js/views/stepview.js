// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse', 'text!templates/steptemplate.html'], function($, Mobile, _, Parse, steptemplate) {
    var StepView, _ref;
    return StepView = (function(_super) {
      __extends(StepView, _super);

      function StepView() {
        _ref = StepView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StepView.prototype.template = _.template(steptemplate);

      StepView.prototype.tagName = 'div';

      StepView.prototype.attributes = {
        'data-role': 'collapsible',
        'data-collapsed': 'true'
      };

      StepView.prototype.events = {
        "click .submit": "add",
        "click .delete": "del"
      };

      StepView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'add', 'del');
        return $(this.el).attr('id', this.model.get('step_num'));
      };

      StepView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      StepView.prototype.add = function(e) {
        var output, str_output;
        e.preventDefault();
        output = Array();
        $(this.el).find('.textinput').each(function() {
          output.push($(this).val());
          return $(this).val("");
        });
        str_output = output.toString();
        str_output = str_output.replace(",", " | ");
        this.model.get('strategies').push(str_output);
        this.model.trigger('change', this.model);
        return console.log('added strategies', this.model.get('strategies'));
      };

      StepView.prototype.del = function(e) {
        var arr, id, num, todelete;
        e.preventDefault();
        todelete = $(e.currentTarget).parent();
        id = todelete.attr('id');
        num = parseInt(id);
        arr = this.model.get('strategies');
        arr.splice(num, 1);
        this.model.set({
          strategies: arr
        });
        return console.log('updated strategies', this.model.get('strategies'));
      };

      StepView.prototype.close = function() {
        $(this.el).empty();
        this.undelegateEvents();
        $(this.el).removeData().unbind();
        this.remove();
        this.unbind();
        Parse.View.prototype.remove.call(this);
        return delete this;
      };

      return StepView;

    })(Parse.View);
  });

}).call(this);
