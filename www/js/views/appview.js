// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse'], function($, Mobile, _, Parse) {
    var AppView, _ref;
    return AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref = AppView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      AppView.prototype.el = '[data-role="page"]';

      AppView.prototype.events = {
        'click .logout': 'logOut'
      };

      AppView.prototype.initialize = function() {
        _.bindAll(this, 'logOut');
        this.render();
        this.jqdisplay();
        this.setUpUser();
        return this.setUpDevice();
      };

      AppView.prototype.logOut = function() {
        console.log('logging out');
        alert('logging out');
        Parse.User.logOut();
        window.location.reload();
        return alert('reloaded');
      };

      AppView.prototype.render = function() {
        console.log('app view');
        return $(this.el).html("	<!--panel -->\n    <div data-role=\"panel\" id=\"myPanel\" data-display=\"push\">\n	\n		<ul data-role=\"listview\" class=\"nav-search\">\n			<li><a href=\"#\">Home</a></li>\n			<li><a href=\"#activities\">Activities</a></li>\n			<li><a href=\"#safety\">Safety Planning</a></li>\n			<li><a href=\"#help\">Get Help</a></li>\n		</ul>\n    </div>\n\n\n	<!--header -->\n    <div data-role=\"header\" class=\"header\" data-position=\"fixed\" role=\"banner\">\n        <h3>Every Day</h3>\n        <a href=\"#myPanel\" data-icon=\"bars\" data-iconpos=\"notext\"></a>\n		<a class=\"logout\" data-bypass=\"true\">Log Out</a>\n\n    </div>\n\n\n	<!--content -->\n    <div data-role=\"content\">\n    </div>\n	");
      };

      AppView.prototype.jqdisplay = function() {
        return $(this.el).trigger("pagecreate");
      };

      AppView.prototype.setUpUser = function() {
        var currentUser;
        if (window.uploader.getMode() !== "online") {
          console.log("sorry, you must be online to set up the user");
          return;
        }
        currentUser = Parse.User.current();
        if (currentUser.get('isSetUp') === true) {
          console.log('user already set up');
          return;
        }
        console.log('still here');
        this.setUpSafety();
        currentUser.set({
          isSetUp: true
        });
        return currentUser.save();
      };

      AppView.prototype.setUpSafety = function() {
        var currentUser, list, st, stepJSON, _i, _len, _ref1, _results;
        console.log('setting up safety');
        list = new StepList;
        stepJSON = [
          {
            "step_num": 1,
            "title": "Warning Signs",
            "description": "Warning signs (thoughts, images, mood, situation, behavior) that a crisis may be developing:",
            "fields": ["warning sign"]
          }, {
            "step_num": 2,
            "title": "Coping Strategies",
            "description": "Internal coping strategies: things I can do to take my mind off my problems without contacting another person (relaxation technique, physical activity):",
            "fields": ["coping strategy"]
          }, {
            "step_num": 3,
            "title": "People",
            "description": "People that provide distraction:",
            "fields": ["name", "phone number"]
          }, {
            "step_num": 4,
            "title": "Settings",
            "description": "Social settings that provide distraction:",
            "fields": ["place"]
          }
        ];
        list.add(stepJSON);
        currentUser = Parse.User.current();
        _ref1 = list.models;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          st = _ref1[_i];
          st.set({
            user: currentUser
          });
          st.setACL(new Parse.ACL(currentUser));
          _results.push(st.save());
        }
        return _results;
      };

      AppView.prototype.setUpDevice = function() {
        if (window.uploader.getMode() !== "online") {
          console.error("sorry, you must be online to set up the device");
          return;
        }
        return window.uploader.syncParseWithLocalStorage();
      };

      return AppView;

    })(Parse.View);
  });

}).call(this);
