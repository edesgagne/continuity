// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'jquerymobile', 'underscore', 'parse'], function($, Mobile, _, Parse) {
    var _ref;
    return window.Uploader = (function(_super) {
      __extends(Uploader, _super);

      function Uploader() {
        _ref = Uploader.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Uploader.prototype.className = "Uploader";

      Uploader.prototype.initialize = function() {
        console.log("uploader");
        return this.mode = "online";
      };

      Uploader.prototype.updateMode = function(newmode) {
        this.mode = newmode;
        return console.log('newmode', this.mode);
      };

      Uploader.prototype.updateCollection = function(coll) {
        console.log('updating collection');
        console.log(coll);
        return window.localStorage["steplist"] = JSON.stringify(coll);
      };

      Uploader.prototype.displaySteps = function() {
        var element, list, listview, step, steps_array, _i, _len;
        if (this.mode === "offline" || this.mode === "online") {
          console.log('displaying offline');
          list = new StepList;
          steps_array = JSON.parse(window.localStorage["steplist"]);
          for (_i = 0, _len = steps_array.length; _i < _len; _i++) {
            step = steps_array[_i];
            list.add(step);
          }
          listview = new StepListView({
            collection: list
          });
          element = listview.render().el;
          $('[data-role="content"]').html(element);
          return listview.jqdisplay();
        } else {
          return console.error('must be either online or offline');
        }
      };

      return Uploader;

    })(Parse.Object);
  });

}).call(this);
